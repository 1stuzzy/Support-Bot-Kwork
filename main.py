import logging
from aiogram import types
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageNotModified,  ChatNotFound, UserDeactivated, BotBlocked
from datetime import datetime
from loader import dp, db, bot

import texts
from states import Registration, CommentState, MessageState, ChangeReward
from keyboards import (get_phone_keyboard, get_key, search_menu,
                       status_keyboard, back_keyboard, add_comment_btn,
                       confirm_keyboard, reward_keyboard, back_menu_btn)
from functions import open_menu, is_agent, is_admin, get_user_group, get_user_status

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'], state='*')
async def start(m: types.Message, state: FSMContext):
    await state.finish()
    user_id = m.from_user.id
    username = m.from_user.username or ''

    if not username:
        await m.answer("–í–∞–º –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
        return

    ref_code = None
    if len(m.text.split()) > 1:
        ref_code = m.text.split()[1]

    if not db.user_exists(user_id):
        await registration_user(m, ref_code)
    else:
        if is_agent(user_id):
            await m.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –ê–≥–µ–Ω—Ç!", reply_markup=await get_key(user_id))
            await open_menu(m, user_id)
        elif is_admin(user_id):
            await m.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=await get_key(user_id))
            await open_menu(m, user_id)
        else:
            await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Ä–µ—Ñ–µ—Ä–∞–ª–∞!", reply_markup=await get_key(user_id))


async def registration_user(m: types.Message, ref_code):
    async with dp.current_state(user=m.from_user.id).proxy() as data:
        data['ref_code'] = ref_code
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é:")
    await Registration.full_name.set()


@dp.message_handler(state=Registration.full_name, content_types=types.ContentTypes.TEXT)
async def process_full_name(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['full_name'] = m.text
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                   reply_markup=get_phone_keyboard())
    await Registration.phone_number.set()


@dp.message_handler(state=Registration.phone_number, content_types=types.ContentTypes.TEXT)
async def process_phone_number_text(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = m.text

    await save_user_data(m, state)


@dp.message_handler(state=Registration.phone_number, content_types=types.ContentTypes.CONTACT)
async def process_phone_number_contact(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = m.contact.phone_number

    await save_user_data(m, state)


async def save_user_data(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = m.from_user.id
        username = m.from_user.username
        full_name = data['full_name']
        phone_number = data['phone_number']
        reg_date = datetime.now().strftime("%d.%m.%Y %H:%M")
        ref_code = data.get('ref_code', None)

        ref = 0
        if ref_code is not None:
            try:
                ref = int(ref_code)
                if is_agent(ref):
                    await bot.send_message(ref,
                                           f'‚ùóÔ∏è <b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>\n\n'
                                           f'üÜî <b>TG:</b> <i>{m.from_user.full_name} | @{username} | <code>{user_id}</code>\n</i>'
                                           f'üôé‚Äç‚ôÇÔ∏è <b>–§–ò–û:</b> <i><tg-spoiler>{full_name}</tg-spoiler></i>\n'
                                           f'‚òéÔ∏è <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <i><tg-spoiler>{phone_number}</tg-spoiler></i>',
                                           reply_markup=await add_comment_btn(ref, user_id))
                else:
                    ref = 0
            except ValueError:
                ref = 0

        db.add_user(user_id, username, full_name, m.from_user.first_name, phone_number, ref, reg_date)

    await m.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=await get_key(user_id))
    await state.finish()


@dp.message_handler(commands=['send_contacts'])
async def send_contacts(m: types.Message):
    await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –≤–∞—à–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –ø–æ –æ–¥–Ω–æ–º—É.")


@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def handle_contact(m: types.Message):
    contact = m.contact
    name = contact.first_name + (f" {contact.last_name}" if contact.last_name else "")
    phone_number = contact.phone_number

    db.add_contact(name, phone_number)

    await m.answer(f"–ö–æ–Ω—Ç–∞–∫—Ç {name} —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")


@dp.inline_handler(lambda query: True)
async def inline_query(e: types.InlineQuery):
    user_id = e.from_user.id
    query_text = e.query
    results = []

    if query_text.startswith('name=') and is_agent(user_id):
        query_text = query_text.replace('name=', '')
        users = db.get_refs(user_id)
        index = 0
        for user in users:
            status = get_user_status(user[0])
            comment = db.get_comment(user[0])

            stats = (
                f'<b>üÜî Telegram ID:</b> <code>{db.get_id(user[0])}</code>\n'
                f'<b>üÜî TG name:</b> {db.get_tgname(user[0])}\n'
                f'<b>üÜî Username:</b> @{db.get_username(user[0])}\n'
                f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(user[0])}\n'
                f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(user[0])}\n'
                f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {status}\n'
                f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n'
                f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(user[0])}'
            )

            try:
                user_name = db.get_name(user[0])
                if not is_agent(user[0]) and user_name and query_text.lower() in user_name.lower():
                    if index == 25:
                        break
                    index += 1
                    results.append(types.InlineQueryResultArticle(
                        id=str(index),
                        title=user_name,
                        description=db.get_phone(user[0]),
                        input_message_content=types.InputTextMessageContent(
                            message_text=stats,
                            disable_web_page_preview=True),
                        reply_markup=await search_menu(user_id, user[0])
                    ))
            except Exception as a:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]}: {a}")

    elif query_text.startswith('user=') and is_admin(user_id):
        query_text = query_text.replace('user=', '')
        users = db.get_all()
        index = 0

        for user in users:
            status = get_user_status(user[0])
            group = get_user_group(user[0])
            comment = db.get_comment(user[0])
            stats = (
                f'<b>üÜî Telegram ID:</b> <code>{db.get_id(user[0])}</code>\n'
                f'<b>üÜî TG name:</b> {db.get_tgname(user[0])}\n'
                f'<b>üÜî Username:</b> @{db.get_username(user[0])}\n'
                f'<b>ü™™ –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(user[0])}\n'
                f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(user[0])}\n'
                f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {status}\n'
                f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞:</b> {comment}\n'
                f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(user[0])}'
            )

            try:
                user_name = db.get_name(user[0])
                if user_name and query_text.lower() in user_name.lower():
                    if index == 25:
                        break
                    index += 1
                    results.append(types.InlineQueryResultArticle(
                        id=str(index),
                        title=user_name,
                        description=db.get_phone(user[0]),
                        input_message_content=types.InputTextMessageContent(
                            message_text=stats,
                            disable_web_page_preview=True),
                        reply_markup=await search_menu(user_id, user[0])
                    ))
            except Exception as a:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]}: {a}")

    await e.answer(results, cache_time=1)


@dp.callback_query_handler(lambda call: call.data.startswith('set_group='))
async def set_group(c: types.CallbackQuery):
    user_id = c.from_user.id
    element_id = c.data.replace('set_group=', '')
    status = get_user_status(element_id)
    group = get_user_group(element_id)
    comment = db.get_comment(element_id)

    if is_admin(user_id):
        if group != '–ê–≥–µ–Ω—Ç':
            db.set_group(element_id, 1)
            new_group = '–ê–≥–µ–Ω—Ç'
            await c.answer('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚úÖ')
            await bot.send_message(element_id, '‚ùóÔ∏è –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ <b>–∞–≥–µ–Ω—Ç–∞</b>!')
        else:
            db.set_group(element_id, 0)
            new_group = '–†–µ—Ñ–µ—Ä–∞–ª'
            await c.answer('–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω ‚ùå')
            await bot.send_message(element_id, '‚ùóÔ∏è –í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ <b>–∞–≥–µ–Ω—Ç–∞</b>!')

        try:
            user_info = (
                f'<b>üÜî Telegram ID:</b> <code>{db.get_id(element_id)}</code>\n'
                f'<b>üÜî TG name:</b> {db.get_tgname(element_id)}\n'
                f'<b>üÜî Username:</b> @{db.get_username(element_id)}\n'
                f'<b>ü™™ –ì—Ä—É–ø–ø–∞:</b> {new_group}\n'
                f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(element_id)}\n'
                f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(element_id)}\n'
                f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {status}\n'
                f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞:</b> {comment}\n'
                f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(element_id)}'
            )

            if c.inline_message_id:
                await bot.edit_message_text(
                    user_info,
                    inline_message_id=c.inline_message_id,
                    reply_markup=await search_menu(user_id, element_id),
                    disable_web_page_preview=True
                )
            else:
                await c.message.edit_text(
                    user_info,
                    reply_markup=await search_menu(user_id, element_id),
                    disable_web_page_preview=True
                )
        except MessageNotModified:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data.startswith('choose_status='))
async def set_status(c: types.CallbackQuery):
    user_id = c.from_user.id
    element_id = c.data.replace('choose_status=', '')
    comment = db.get_comment(element_id)
    if is_admin(user_id):
        try:
            user_info = (
                f'<b>üÜî Telegram ID:</b> <code>{db.get_id(element_id)}</code>\n'
                f'<b>üÜî TG name:</b> {db.get_tgname(element_id)}\n'
                f'<b>üÜî Username:</b> @{db.get_username(element_id)}\n'
                f'<b>ü™™ –ì—Ä—É–ø–ø–∞:</b> {get_user_group(element_id)}\n'
                f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(element_id)}\n'
                f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(element_id)}\n'
                f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {get_user_status(element_id)}\n'
                f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞:</b> {comment}\n'
                f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(element_id)}'
            )

            if c.inline_message_id:
                await bot.edit_message_text(
                    user_info,
                    inline_message_id=c.inline_message_id,
                    reply_markup=status_keyboard(element_id),
                    disable_web_page_preview=True
                )
            else:
                await c.message.edit_text(
                    user_info,
                    reply_markup=status_keyboard(element_id),
                    disable_web_page_preview=True
                )
        except MessageNotModified:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data.startswith(('status_waiting=', 'status_closed=', 'status_declined=')))
async def handle_status_change(c: types.CallbackQuery):
    user_id = c.from_user.id
    data = c.data.split('=')
    new_status = data[0]
    element_id = data[1]
    comment = db.get_comment(element_id)

    status_map = {
        'status_waiting': 0,
        'status_declined': 1,
        'status_closed': 2,
    }

    if new_status in status_map and is_admin(user_id):
        current_status = db.get_status(element_id)
        new_status_code = status_map[new_status]

        if current_status != new_status_code:
            db.set_status(element_id, new_status_code)

            user_info = (
                f'<b>üÜî Telegram ID:</b> <code>{db.get_id(element_id)}</code>\n'
                f'<b>üÜî TG name:</b> {db.get_tgname(element_id)}\n'
                f'<b>üÜî Username:</b> @{db.get_username(element_id)}\n'
                f'<b>ü™™ –ì—Ä—É–ø–ø–∞:</b> {get_user_group(element_id)}\n'
                f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(element_id)}\n'
                f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(element_id)}\n'
                f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {get_user_status(element_id)}\n'
                f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞:</b> {comment}\n'
                f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(element_id)}'
            )

            if new_status == 'status_closed':
                agent_id = db.get_ref(element_id)
                agent_username = db.get_username(agent_id)
                await bot.send_message(agent_id, f"–ó–∞–∫—Ä—ã–ª–∞—Å—å —Å–¥–µ–ª–∫–∞ @{agent_username} - –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Å–¥–µ–ª–∫—É –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

            if c.inline_message_id:
                await bot.edit_message_text(
                    user_info,
                    inline_message_id=c.inline_message_id,
                    reply_markup=await search_menu(user_id, element_id),
                    disable_web_page_preview=True
                )
            else:
                await c.message.edit_text(
                    user_info,
                    reply_markup=await search_menu(user_id, element_id),
                    disable_web_page_preview=True
                )
    else:
        await c.answer(text='‚úÖ')



@dp.callback_query_handler(lambda c: c.data.startswith('i='), state='*')
async def update_user_info(c: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = c.from_user.id
    element_id = c.data.replace('i=', '')

    if db.user_exists(element_id) is None:
        return

    status = get_user_status(element_id)
    group = get_user_group(element_id)
    comment = db.get_comment(element_id)
    user_info = (
            f'<b>üÜî Telegram ID:</b> <code>{db.get_id(element_id)}</code>\n'
            f'<b>üÜî TG name:</b> {db.get_tgname(element_id)}\n'
            f'<b>üÜî Username:</b> @{db.get_username(element_id)}\n'
            + (f'<b>ü™™ –ì—Ä—É–ø–ø–∞:</b> {group}\n' if is_admin(user_id) else '') +
            f'<b>üë®‚Äçüíª –ò–º—è –§–∞–º–∏–ª–∏—è:</b> {db.get_name(element_id)}\n'
            f'<b>‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {db.get_phone(element_id)}\n'
            f'<b>üîπ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> {status}\n'
            + (f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≥–µ–Ω—Ç–∞:</b> {comment}\n' if is_admin(user_id) else f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n') +
            f'<b>üóì –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {db.get_date(element_id)}\n'
    )

    try:
        if c.inline_message_id is not None:
            await bot.edit_message_text(
                user_info,
                disable_web_page_preview=True,
                reply_markup=await search_menu(user_id, element_id),
                inline_message_id=c.inline_message_id
            )
        else:
            await c.message.edit_text(
                user_info,
                disable_web_page_preview=True,
                reply_markup=await search_menu(user_id, element_id),
            )

    except MessageNotModified:
        await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data.startswith('set_comment='))
async def set_comment(c: types.CallbackQuery):
    user_id = c.from_user.id
    element_id = c.data.replace('set_comment=', '')

    if is_agent(user_id) and db.get_ref(element_id) == user_id:
        text = (f'üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ '
                f'<a href="t.me/{db.get_username(element_id)}">{db.get_name(element_id)}</a></b>')

        await CommentState.text.set()
        state = dp.current_state(user=c.from_user.id)
        await state.update_data(element_id=element_id)

        if c.inline_message_id:
            await bot.edit_message_text(
                text,
                inline_message_id=c.inline_message_id,
                reply_markup=back_keyboard(element_id),
                disable_web_page_preview=True
            )
        else:
            await c.message.edit_text(
                text,
                reply_markup=back_keyboard(element_id),
                disable_web_page_preview=True
            )


@dp.message_handler(state=CommentState.text)
async def receive_comment(m: types.Message, state: FSMContext):
    user_data = await state.get_data()
    element_id = user_data.get('element_id')
    new_comment = m.text

    db.set_comment(element_id, new_comment)

    await m.answer(f'<b>‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ <a href="t.me/{db.get_username(element_id)}">{db.get_name(element_id)}</a> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.</b>\n\n'
                   f'<b>üí¨ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</b> <i>{new_comment}</i>',
                   disable_web_page_preview=True)
    await state.finish()


@dp.callback_query_handler(lambda call: call.data.startswith('send_message='))
async def start_send_message(c: types.CallbackQuery, state: FSMContext):
    user_id = c.from_user.id
    element_id = c.data.replace('send_message=', '')

    await MessageState.text.set()
    await state.update_data(element_id=element_id)

    text = f'üìù <b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <a href="t.me/{db.get_username(element_id)}">{db.get_name(element_id)}</a>:</b>'

    if c.message:
        await c.message.answer(text, reply_markup=back_keyboard(element_id),
                               disable_web_page_preview=True)
    elif c.inline_message_id:
        await bot.send_message(c.from_user.id, text, reply_markup=back_keyboard(element_id),
                               disable_web_page_preview=True)

    await c.answer()


@dp.message_handler(state=MessageState.text)
async def receive_message(m: types.Message, state: FSMContext):
    await state.update_data(message_text=m.text)

    await m.answer(f"‚è≥ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:</b>\n\n{m.text}", reply_markup=confirm_keyboard(),
                   disable_web_page_preview=True)
    await MessageState.confirming_text.set()


@dp.callback_query_handler(lambda call: call.data == 'confirm_send', state=MessageState.confirming_text)
async def confirm_send_message(c: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    element_id = user_data['element_id']
    message_text = user_data['message_text']

    try:
        await bot.send_message(chat_id=element_id, text=message_text)
        await c.message.edit_text(f'üì© <b><a href="t.me/{db.get_username(element_id)}">{db.get_name(element_id)}</a> '
                                  f'—É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>',
                                  disable_web_page_preview=True)
    except ChatNotFound:
        await c.message.edit_text("<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.</b>")
    except UserDeactivated:
        await c.message.edit_text("<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.</b>")
    except BotBlocked:
        await c.message.edit_text("<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.</b>")
    except Exception as e:
        logging.exception(e)
        await c.message.edit_text("<b>‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>")

    await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'cancel_send', state=MessageState.confirming_text)
async def cancel_send_message(c: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    element_id = user_data['element_id']
    await c.message.edit_text("<b>‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                              "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚óÄÔ∏è –ù–∞–∑–∞–¥</b>", reply_markup=back_keyboard(element_id))
    await state.finish()


@dp.message_handler(commands=['add_admin'])
async def add_admin(m: types.Message):
    user_id = m.from_user.id

    if is_admin(user_id):
        try:
            command_parts = m.text.split()
            if len(command_parts) != 2:
                await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ user_id. –ü—Ä–∏–º–µ—Ä: /add_admin 123456789")
                return

            new_admin_id = int(command_parts[1])
            if db.user_exists(new_admin_id):
                db.set_group(new_admin_id, 2)
                await m.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {new_admin_id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await m.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except ValueError:
            await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
        except Exception as e:
            logging.exception(e)
            await m.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        await m.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(commands=['award'])
async def award_user(m: types.Message):
    user_id = m.from_user.id

    if is_admin(user_id):
        try:
            command_parts = m.text.split(maxsplit=2)
            if len(command_parts) != 3:
                await m.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ç–∏–ø –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.\n"
                              "–ü—Ä–∏–º–µ—Ä: /award 1234567890 –û—Ç–∫–∞–∑–Ω–æ–µ –ø–∏—Å—å–º–æ\n\n"
                              "<b>–¢–∏–ø—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:</b>\n"
                              "<code>–û—Ç–∫–∞–∑–Ω–æ–µ –ø–∏—Å—å–º–æ</code>\n<code>–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è 1–î</code>\n<code>–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è 3–î</code>\n<code>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è</code>\n<code>–°–ì–†</code>")
                return

            phone_number = command_parts[1]
            award_type = command_parts[2]

            award_amount = db.get_reward_amount(award_type)
            if award_amount is None:
                await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
                return

            if db.user_exists_by_phone(phone_number):
                user_id = db.get_user_id_by_phone(phone_number)
                if is_agent(user_id):
                    db.add_to_balance(user_id, award_amount)
                    db.record_award(user_id, phone_number, award_type, award_amount)
                    await bot.send_message(user_id, f"üí∏ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{award_amount} ‚ÇΩ</b> –∑–∞ <b>{award_type}</b>!")
                    await m.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>{phone_number}</b>\n"
                                  f"–ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: <b>{award_type}</b> –Ω–∞ —Å—É–º–º—É <b>{award_amount} ‚ÇΩ</b>.")
                else:
                    await m.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≥–µ–Ω—Ç–æ–º.")
            else:
                await m.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except ValueError:
            await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ç–∏–ø –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            logging.exception(e)
            await m.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await m.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.callback_query_handler(lambda c: c.data == 'select_reward')
async def select_reward_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if not is_admin(user_id):
        await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    reward_types = db.get_all_reward_types()
    reward_info = "\n".join([f"<i>{reward[0]} - <code>{db.get_reward_amount(reward[0])} ‚ÇΩ</code></i>" for reward in reward_types])

    await callback_query.message.edit_text(f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:</b>\n\n"
                                           f"{reward_info}",
                                           reply_markup=reward_keyboard())
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('change_reward_'))
async def process_reward_callback(callback_query: types.CallbackQuery, state: FSMContext):
    reward_type = callback_query.data[len('change_reward_'):]
    amount = db.get_reward_amount(reward_type)
    await callback_query.message.edit_text(f"–°–µ–π—á–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - <b><code>{amount}</code> —Ä—É–±–ª–µ–π</b>\n\n"
                                           f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è <b>{reward_type}</b>:")
    async with state.proxy() as data:
        data['reward_type'] = reward_type
    await ChangeReward.amount.set()


@dp.message_handler(state=ChangeReward.amount, content_types=types.ContentTypes.TEXT)
async def process_new_amount(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        reward_type = data['reward_type']
        try:
            new_amount = int(m.text)
        except ValueError:
            await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return

        if db.update_reward_amount(reward_type, new_amount):
            await m.reply(f"–°—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –¥–ª—è <b>{reward_type}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <code><b>{new_amount} ‚ÇΩ</b></code>.")
        else:
            await m.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É–º–º—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–ø –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

    await state.finish()


@dp.message_handler(commands=['delete_user'])
async def delete_user(m: types.Message):
    user_id = m.from_user.id
    if is_admin(user_id):
        try:
            delete_id = int(m.text.split()[1])
        except Exception as e:
            await m.answer('<code>/delete_user user_id</code>')
            await m.answer(f'{e}')
            return
        try:
            db.delete_user(delete_id)
            await m.answer(f'{delete_id} - –£–¥–∞–ª–µ–Ω –∏–∑ –ë–î')
        except Exception as e:
            await m.answer(f"{e}")


@dp.message_handler(content_types='text', state='*')
async def get_text(m: types.Message, state: FSMContext):
    await state.finish()
    if m.text == '–ú–µ–Ω—é –∞–≥–µ–Ω—Ç–∞ üñ•':
        await open_menu(m, m.from_user.id)
    elif m.text == '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üë®‚Äçüíª':
        await open_menu(m, m.from_user.id)
    elif m.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
        await m.answer(texts.settings_text)
    elif m.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è':
        await m.answer(texts.info_text)
    elif m.text == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª':
        await m.answer(texts.tech_text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
